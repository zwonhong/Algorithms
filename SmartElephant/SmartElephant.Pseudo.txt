1. scan all data and sort, store their index in the array
	AscendingSort(W[], n) {
		for i <- 0 to n
			if Min(W), W[i] <-> W[Min]
			store index(Min)
	}
	DescendingSort(S[], n) {
		for i <- 0 to n
			if Max(S), S[i] <-> W[Max]
			store index(Max)
	}
2. make Dynamic Programming Table by using index array
	MakeDPTable(Windex[], Sindex[], n) {
		for i <- 1 to n + 1
			DP[0][i] = Windex[i-1]
			DP[i][0] = Sindex[i-1]
		for i <- 1 to n + 1
			for j <- 1 to n + 1
				copy the line above when line above is not a index line
				if (DP[i][0] == DP[0][j]) DP[i][j]++;
				if change the value of current line, change all after value to same value (only in same row)
3. find the path
	start at table's bottom rightmost
	findPath(DP[][], n)
		for i <- n(number of Counterexample) from 1
			move to upward
			if (DP[i-1][j]==DP[i][j]-1 && DP[i-1][j-1]==DP[i][j]-1 && DP[i][j]==n) save DP[i-1][0], n--;
				move to left
			if it is the first move to find the path, save the top of column that unly have same value

4. print the path by reverse order
